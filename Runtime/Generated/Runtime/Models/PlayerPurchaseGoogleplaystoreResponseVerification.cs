//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Economy.Internal.Http;



namespace Unity.Services.Economy.Internal.Models
{
    /// <summary>
    /// PlayerPurchaseGoogleplaystoreResponseVerification model
    /// </summary>
    [Preserve]
    [DataContract(Name = "player_purchase_googleplaystore_response_verification")]
    internal class PlayerPurchaseGoogleplaystoreResponseVerification
    {
        /// <summary>
        /// Creates an instance of PlayerPurchaseGoogleplaystoreResponseVerification.
        /// </summary>
        /// <param name="status">Status of the receipt verification.  * &#x60;VALID&#x60;: The purchase was valid.  * &#x60;VALID_NOT_REDEEMED&#x60;: The purchase was valid but seen before, and had not yet been redeemed.  * &#x60;INVALID_ALREADY_REDEEMED&#x60;: The purchase has already been redeemed.  * &#x60;INVALID_VERIFICATION_FAILED&#x60;: The receipt verification Service returned that the receipt data was not valid.  * &#x60;INVALID_ANOTHER_PLAYER&#x60;: The receipt has previously been used by a different player and validated.  * &#x60;INVALID_CONFIGURATION&#x60;: The service configuration is invalid, further information in the details section of the response.  * &#x60;INVALID_PRODUCT_ID_MISMATCH&#x60;: The purchase configuration store product identifier does not match the one in the receipt. * &#x60;CURRENCY_MAX_EXCEEDED&#x60;: Could not add the rewards because one or more currencies would be taken over the specified maximum balance.</param>
        /// <param name="store">store param</param>
        [Preserve]
        public PlayerPurchaseGoogleplaystoreResponseVerification(StatusOptions status, PlayerPurchaseGoogleplaystoreResponseVerificationStore store)
        {
            Status = status;
            Store = store;
        }

        /// <summary>
        /// Status of the receipt verification.  * &#x60;VALID&#x60;: The purchase was valid.  * &#x60;VALID_NOT_REDEEMED&#x60;: The purchase was valid but seen before, and had not yet been redeemed.  * &#x60;INVALID_ALREADY_REDEEMED&#x60;: The purchase has already been redeemed.  * &#x60;INVALID_VERIFICATION_FAILED&#x60;: The receipt verification Service returned that the receipt data was not valid.  * &#x60;INVALID_ANOTHER_PLAYER&#x60;: The receipt has previously been used by a different player and validated.  * &#x60;INVALID_CONFIGURATION&#x60;: The service configuration is invalid, further information in the details section of the response.  * &#x60;INVALID_PRODUCT_ID_MISMATCH&#x60;: The purchase configuration store product identifier does not match the one in the receipt. * &#x60;CURRENCY_MAX_EXCEEDED&#x60;: Could not add the rewards because one or more currencies would be taken over the specified maximum balance.
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusOptions Status{ get; }
        
        /// <summary>
        /// Parameter store of PlayerPurchaseGoogleplaystoreResponseVerification
        /// </summary>
        [Preserve]
        [DataMember(Name = "store", IsRequired = true, EmitDefaultValue = true)]
        public PlayerPurchaseGoogleplaystoreResponseVerificationStore Store{ get; }
    
        /// <summary>
        /// Status of the receipt verification.  * &#x60;VALID&#x60;: The purchase was valid.  * &#x60;VALID_NOT_REDEEMED&#x60;: The purchase was valid but seen before, and had not yet been redeemed.  * &#x60;INVALID_ALREADY_REDEEMED&#x60;: The purchase has already been redeemed.  * &#x60;INVALID_VERIFICATION_FAILED&#x60;: The receipt verification Service returned that the receipt data was not valid.  * &#x60;INVALID_ANOTHER_PLAYER&#x60;: The receipt has previously been used by a different player and validated.  * &#x60;INVALID_CONFIGURATION&#x60;: The service configuration is invalid, further information in the details section of the response.  * &#x60;INVALID_PRODUCT_ID_MISMATCH&#x60;: The purchase configuration store product identifier does not match the one in the receipt. * &#x60;CURRENCY_MAX_EXCEEDED&#x60;: Could not add the rewards because one or more currencies would be taken over the specified maximum balance.
        /// </summary>
        /// <value>Status of the receipt verification.  * &#x60;VALID&#x60;: The purchase was valid.  * &#x60;VALID_NOT_REDEEMED&#x60;: The purchase was valid but seen before, and had not yet been redeemed.  * &#x60;INVALID_ALREADY_REDEEMED&#x60;: The purchase has already been redeemed.  * &#x60;INVALID_VERIFICATION_FAILED&#x60;: The receipt verification Service returned that the receipt data was not valid.  * &#x60;INVALID_ANOTHER_PLAYER&#x60;: The receipt has previously been used by a different player and validated.  * &#x60;INVALID_CONFIGURATION&#x60;: The service configuration is invalid, further information in the details section of the response.  * &#x60;INVALID_PRODUCT_ID_MISMATCH&#x60;: The purchase configuration store product identifier does not match the one in the receipt. * &#x60;CURRENCY_MAX_EXCEEDED&#x60;: Could not add the rewards because one or more currencies would be taken over the specified maximum balance.</value>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusOptions
        {
            /// <summary>
            /// Enum VALID for value: VALID
            /// </summary>
            [EnumMember(Value = "VALID")]
            VALID = 1,
            /// <summary>
            /// Enum VALIDNOTREDEEMED for value: VALID_NOT_REDEEMED
            /// </summary>
            [EnumMember(Value = "VALID_NOT_REDEEMED")]
            VALIDNOTREDEEMED = 2,
            /// <summary>
            /// Enum INVALIDALREADYREDEEMED for value: INVALID_ALREADY_REDEEMED
            /// </summary>
            [EnumMember(Value = "INVALID_ALREADY_REDEEMED")]
            INVALIDALREADYREDEEMED = 3,
            /// <summary>
            /// Enum INVALIDVERIFICATIONFAILED for value: INVALID_VERIFICATION_FAILED
            /// </summary>
            [EnumMember(Value = "INVALID_VERIFICATION_FAILED")]
            INVALIDVERIFICATIONFAILED = 4,
            /// <summary>
            /// Enum INVALIDANOTHERPLAYER for value: INVALID_ANOTHER_PLAYER
            /// </summary>
            [EnumMember(Value = "INVALID_ANOTHER_PLAYER")]
            INVALIDANOTHERPLAYER = 5,
            /// <summary>
            /// Enum INVALIDCONFIGURATION for value: INVALID_CONFIGURATION
            /// </summary>
            [EnumMember(Value = "INVALID_CONFIGURATION")]
            INVALIDCONFIGURATION = 6,
            /// <summary>
            /// Enum INVALIDPRODUCTIDMISMATCH for value: INVALID_PRODUCT_ID_MISMATCH
            /// </summary>
            [EnumMember(Value = "INVALID_PRODUCT_ID_MISMATCH")]
            INVALIDPRODUCTIDMISMATCH = 7,
            /// <summary>
            /// Enum CURRENCYMAXEXCEEDED for value: CURRENCY_MAX_EXCEEDED
            /// </summary>
            [EnumMember(Value = "CURRENCY_MAX_EXCEEDED")]
            CURRENCYMAXEXCEEDED = 8
        }

        /// <summary>
        /// Formats a PlayerPurchaseGoogleplaystoreResponseVerification into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            serializedModel += "status," + Status + ",";
            if (Store != null)
            {
                serializedModel += "store," + Store.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a PlayerPurchaseGoogleplaystoreResponseVerification as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            var statusStringValue = Status.ToString();
            dictionary.Add("status", statusStringValue);
            
            return dictionary;
        }
    }
}
