//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Economy.Internal.Http;



namespace Unity.Services.Economy.Internal.Models
{
    /// <summary>
    /// Rewards of the purchase.
    /// </summary>
    [Preserve]
    [DataContract(Name = "player_purchase_googleplaystore_response_rewards")]
    internal class PlayerPurchaseGoogleplaystoreResponseRewards
    {
        /// <summary>
        /// Rewards of the purchase.
        /// </summary>
        /// <param name="currency">Currency that was credited in the purchase.</param>
        /// <param name="inventory">Inventory that was credited in the purchase.</param>
        [Preserve]
        public PlayerPurchaseGoogleplaystoreResponseRewards(List<CurrencyExchangeItem> currency, List<InventoryExchangeItem> inventory)
        {
            Currency = currency;
            Inventory = inventory;
        }

        /// <summary>
        /// Currency that was credited in the purchase.
        /// </summary>
        [Preserve]
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public List<CurrencyExchangeItem> Currency{ get; }
        
        /// <summary>
        /// Inventory that was credited in the purchase.
        /// </summary>
        [Preserve]
        [DataMember(Name = "inventory", IsRequired = true, EmitDefaultValue = true)]
        public List<InventoryExchangeItem> Inventory{ get; }
    
        /// <summary>
        /// Formats a PlayerPurchaseGoogleplaystoreResponseRewards into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Currency != null)
            {
                serializedModel += "currency," + Currency.ToString() + ",";
            }
            if (Inventory != null)
            {
                serializedModel += "inventory," + Inventory.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a PlayerPurchaseGoogleplaystoreResponseRewards as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            return dictionary;
        }
    }
}
