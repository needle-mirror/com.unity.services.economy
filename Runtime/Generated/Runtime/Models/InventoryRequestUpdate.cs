//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Economy.Internal.Http;



namespace Unity.Services.Economy.Internal.Models
{
    /// <summary>
    /// InventoryRequestUpdate model
    /// </summary>
    [Preserve]
    [DataContract(Name = "inventory-request-update")]
    internal class InventoryRequestUpdate
    {
        /// <summary>
        /// Creates an instance of InventoryRequestUpdate.
        /// </summary>
        /// <param name="instanceData">Instance data to be saved against the inventory item. Max size when serialized 5 KB.</param>
        /// <param name="writeLock">The write lock for the inventory item instance.</param>
        [Preserve]
        public InventoryRequestUpdate(object instanceData, string writeLock = default)
        {
            InstanceData = (IDeserializable) JsonObject.GetNewJsonObjectResponse(instanceData);
            WriteLock = writeLock;
        }

        /// <summary>
        /// Instance data to be saved against the inventory item. Max size when serialized 5 KB.
        /// </summary>
        [Preserve][JsonConverter(typeof(JsonObjectConverter))]
        [DataMember(Name = "instanceData", IsRequired = true, EmitDefaultValue = true)]
        public IDeserializable InstanceData{ get; }
        
        /// <summary>
        /// The write lock for the inventory item instance.
        /// </summary>
        [Preserve]
        [DataMember(Name = "writeLock", EmitDefaultValue = false)]
        public string WriteLock{ get; }
    
        /// <summary>
        /// Formats a InventoryRequestUpdate into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (InstanceData != null)
            {
                serializedModel += "instanceData," + InstanceData.ToString() + ",";
            }
            if (WriteLock != null)
            {
                serializedModel += "writeLock," + WriteLock;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a InventoryRequestUpdate as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (WriteLock != null)
            {
                var writeLockStringValue = WriteLock.ToString();
                dictionary.Add("writeLock", writeLockStringValue);
            }
            
            return dictionary;
        }
    }
}
