// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.Services.Core
{
    public static class UnityServicesExtensions
    {
        public static Unity.Services.Economy.IEconomyService GetEconomyService(this IUnityServices unityServices);
    }
}

namespace Unity.Services.Economy
{
    public class AddInventoryItemOptions
    {
        public object InstanceData;
        public string PlayersInventoryItemId;
        public AddInventoryItemOptions() {}
    }

    [System.Obsolete(@"The interface provided by Economy.Configuration has been replaced by EconomyService.Instance.Configuration, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public class Configuration
    {
        public Configuration() {}
        [System.Obsolete(@"The interface provided by Economy.Configuration.GetCurrenciesAsync() has been replaced by EconomyService.Instance.Configuration.GetCurrenciesAsync(), and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<System.Collections.Generic.List<Model.CurrencyDefinition>> GetCurrenciesAsync();
        [System.Obsolete(@"The interface provided by Economy.Configuration.GetCurrencyAsync(string id) has been replaced by EconomyService.Instance.Configuration.GetCurrencyAsync(string id), and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<Model.CurrencyDefinition> GetCurrencyAsync(string id);
        [System.Obsolete(@"The interface provided by Economy.Configuration.GetInventoryItemAsync(string id) has been replaced by EconomyService.Instance.Configuration.GetInventoryItemAsync(string id), and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<Model.InventoryItemDefinition> GetInventoryItemAsync(string id);
        [System.Obsolete(@"The interface provided by Economy.Configuration.GetInventoryItemsAsync() has been replaced by EconomyService.Instance.Configuration.GetInventoryItemsAsync(), and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<System.Collections.Generic.List<Model.InventoryItemDefinition>> GetInventoryItemsAsync();
        [System.Obsolete(@"The interface provided by Economy.Configuration.GetRealMoneyPurchaseAsync(string id) has been replaced by EconomyService.Instance.Configuration.GetRealMoneyPurchaseAsync(string id), and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<Model.RealMoneyPurchaseDefinition> GetRealMoneyPurchaseAsync(string id);
        [System.Obsolete(@"The interface provided by Economy.Configuration.GetRealMoneyPurchasesAsync() has been replaced by EconomyService.Instance.Configuration.GetRealMoneyPurchasesAsync(), and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<System.Collections.Generic.List<Model.RealMoneyPurchaseDefinition>> GetRealMoneyPurchasesAsync();
        [System.Obsolete(@"The interface provided by Economy.Configuration.GetVirtualPurchaseAsync(string id) has been replaced by EconomyService.Instance.Configuration.GetVirtualPurchaseAsync(string id), and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<Model.VirtualPurchaseDefinition> GetVirtualPurchaseAsync(string id);
        [System.Obsolete(@"The interface provided by Economy.Configuration.GetVirtualPurchasesAsync() has been replaced by EconomyService.Instance.Configuration.GetVirtualPurchasesAsync(), and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<System.Collections.Generic.List<Model.VirtualPurchaseDefinition>> GetVirtualPurchasesAsync();
    }

    public class DecrementBalanceOptions
    {
        public string WriteLock;
        public DecrementBalanceOptions() {}
    }

    public class DeletePlayersInventoryItemOptions
    {
        public string WriteLock;
        public DeletePlayersInventoryItemOptions() {}
    }

    [System.Obsolete(@"The interface provided by Economy has moved to EconomyService.Instance, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public static class Economy
    {
        [System.Obsolete(@"The interface provided by Economy.Configuration has been replaced by EconomyService.Instance.Configuration, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public static Configuration Configuration;
        [System.Obsolete(@"The interface provided by Economy.PlayerBalances has been replaced by EconomyService.Instance.PlayerBalances, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public static PlayerBalances PlayerBalances;
        [System.Obsolete(@"The interface provided by Economy.PlayerInventory has been replaced by EconomyService.Instance.PlayerInventory, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public static PlayerInventory PlayerInventory;
        [System.Obsolete(@"The interface provided by Economy.Purchases has been replaced by EconomyService.Instance.Purchases, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public static Purchases Purchases;
    }

    public class EconomyAppleAppStorePurchaseFailedException : EconomyException
    {
        public Model.RedeemAppleAppStorePurchaseResult Data { get; }
    }

    public class EconomyException : Unity.Services.Core.RequestFailedException
    {
        public EconomyExceptionReason Reason { get; }
    }

    public enum EconomyExceptionReason
    {
        BadGateway = 502,
        ConfigAssignmentHashInvalid = 3,
        ConfigNotSynced = 4,
        Conflict = 409,
        EntityNotFound = 404,
        Forbidden = 403,
        GatewayTimeout = 504,
        InternalServerError = 500,
        InvalidArgument = 400,
        NetworkError = 1,
        NotImplemented = 501,
        RateLimited = 429,
        RequestTimeOut = 408,
        ServiceUnavailable = 503,
        Unauthorized = 401,
        Unknown = 0,
        UnprocessableTransaction = 422,
    }

    public class EconomyGooglePlayStorePurchaseFailedException : EconomyException
    {
        public Model.RedeemGooglePlayPurchaseResult Data { get; }
    }

    public class EconomyInstance : IEconomyService
    {
        public IEconomyConfigurationApiClient Configuration { get; }
        public IEconomyPlayerBalancesApiClient PlayerBalances { get; }
        public IEconomyPlayerInventoryApiClient PlayerInventory { get; }
        public IEconomyPurchasesApiClientApi Purchases { get; }
    }

    public class EconomyRateLimitedException : EconomyException
    {
        public int RetryAfter { get; }
    }

    public static class EconomyService
    {
        public static IEconomyService Instance { get; }
    }

    public class EconomyValidationErrorDetail
    {
        public string Field { get; }
        public System.Collections.Generic.List<string> Messages { get; }
        public EconomyValidationErrorDetail(string field, System.Collections.Generic.List<string> messages) {}
    }

    public class EconomyValidationException : EconomyException
    {
        public System.Collections.Generic.List<EconomyValidationErrorDetail> Details { get; }
    }

    public class GetBalancesOptions
    {
        public int ItemsPerFetch = 20;
        public GetBalancesOptions() {}
    }

    public class GetInventoryOptions
    {
        public System.Collections.Generic.List<string> InventoryItemIds;
        public int ItemsPerFetch = 20;
        public System.Collections.Generic.List<string> PlayersInventoryItemIds;
        public GetInventoryOptions() {}
    }

    public interface IEconomyConfigurationApiClient
    {
        public string GetConfigAssignmentHash();
        public System.Collections.Generic.List<Model.CurrencyDefinition> GetCurrencies();
        [System.Obsolete(@"GetCurrenciesAsync has been replaced by first caching your configuration using SyncConfigurationAsync and then using the GetCurrencies method. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<System.Collections.Generic.List<Model.CurrencyDefinition>> GetCurrenciesAsync();
        public Model.CurrencyDefinition GetCurrency(string id);
        [System.Obsolete(@"GetCurrencyAsync has been replaced by first caching your configuration using SyncConfigurationAsync and then using the GetCurrency method. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<Model.CurrencyDefinition> GetCurrencyAsync(string id);
        public Model.InventoryItemDefinition GetInventoryItem(string id);
        [System.Obsolete(@"GetInventoryItemAsync has been replaced by first caching your configuration using SyncConfigurationAsync and then using the GetInventoryItem method. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<Model.InventoryItemDefinition> GetInventoryItemAsync(string id);
        public System.Collections.Generic.List<Model.InventoryItemDefinition> GetInventoryItems();
        [System.Obsolete(@"GetInventoryItemsAsync has been replaced by first caching your configuration using SyncConfigurationAsync and then using the GetInventoryItems method. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<System.Collections.Generic.List<Model.InventoryItemDefinition>> GetInventoryItemsAsync();
        public Model.RealMoneyPurchaseDefinition GetRealMoneyPurchase(string id);
        [System.Obsolete(@"GetRealMoneyPurchaseAsync has been replaced by first caching your configuration using SyncConfigurationAsync and then using the GetRealMoneyPurchase method. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<Model.RealMoneyPurchaseDefinition> GetRealMoneyPurchaseAsync(string id);
        public System.Collections.Generic.List<Model.RealMoneyPurchaseDefinition> GetRealMoneyPurchases();
        [System.Obsolete(@"GetRealMoneyPurchasesAsync has been replaced by first caching your configuration using SyncConfigurationAsync and then using the GetRealMoneyPurchases method. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<System.Collections.Generic.List<Model.RealMoneyPurchaseDefinition>> GetRealMoneyPurchasesAsync();
        public Model.VirtualPurchaseDefinition GetVirtualPurchase(string id);
        [System.Obsolete(@"GetVirtualPurchaseAsync has been replaced by first caching your configuration using SyncConfigurationAsync and then using the GetVirtualPurchase method. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<Model.VirtualPurchaseDefinition> GetVirtualPurchaseAsync(string id);
        public System.Collections.Generic.List<Model.VirtualPurchaseDefinition> GetVirtualPurchases();
        [System.Obsolete(@"GetVirtualPurchasesAsync has been replaced by first caching your configuration using SyncConfigurationAsync and then using the GetVirtualPurchases method. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<System.Collections.Generic.List<Model.VirtualPurchaseDefinition>> GetVirtualPurchasesAsync();
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Model.ConfigurationItemDefinition>> SyncConfigurationAsync();
    }

    public interface IEconomyPlayerBalancesApiClient
    {
        public event System.Action<string> BalanceUpdated;
        public System.Threading.Tasks.Task<Model.PlayerBalance> DecrementBalanceAsync(string currencyId, int amount, DecrementBalanceOptions options = default(DecrementBalanceOptions));
        public System.Threading.Tasks.Task<Model.GetBalancesResult> GetBalancesAsync(GetBalancesOptions options = default(GetBalancesOptions));
        public System.Threading.Tasks.Task<Model.PlayerBalance> IncrementBalanceAsync(string currencyId, int amount, IncrementBalanceOptions options = default(IncrementBalanceOptions));
        public System.Threading.Tasks.Task<Model.PlayerBalance> SetBalanceAsync(string currencyId, long balance, SetBalanceOptions options = default(SetBalanceOptions));
    }

    public interface IEconomyPlayerInventoryApiClient
    {
        public event System.Action<string> PlayersInventoryItemUpdated;
        public System.Threading.Tasks.Task<Model.PlayersInventoryItem> AddInventoryItemAsync(string inventoryItemId, AddInventoryItemOptions options = default(AddInventoryItemOptions));
        public System.Threading.Tasks.Task DeletePlayersInventoryItemAsync(string playersInventoryItemId, DeletePlayersInventoryItemOptions options = default(DeletePlayersInventoryItemOptions));
        public System.Threading.Tasks.Task<Model.GetInventoryResult> GetInventoryAsync(GetInventoryOptions options = default(GetInventoryOptions));
        public System.Threading.Tasks.Task<Model.PlayersInventoryItem> UpdatePlayersInventoryItemAsync(string playersInventoryItemId, object instanceData, UpdatePlayersInventoryItemOptions options = default(UpdatePlayersInventoryItemOptions));
    }

    public interface IEconomyPurchasesApiClientApi
    {
        public System.Threading.Tasks.Task<Model.MakeVirtualPurchaseResult> MakeVirtualPurchaseAsync(string virtualPurchaseId, MakeVirtualPurchaseOptions options = default(MakeVirtualPurchaseOptions));
        public System.Threading.Tasks.Task<Model.RedeemAppleAppStorePurchaseResult> RedeemAppleAppStorePurchaseAsync(RedeemAppleAppStorePurchaseArgs args);
        public System.Threading.Tasks.Task<Model.RedeemGooglePlayPurchaseResult> RedeemGooglePlayPurchaseAsync(RedeemGooglePlayStorePurchaseArgs args);
    }

    public interface IEconomyService
    {
        public IEconomyConfigurationApiClient Configuration { get; }
        public IEconomyPlayerBalancesApiClient PlayerBalances { get; }
        public IEconomyPlayerInventoryApiClient PlayerInventory { get; }
        public IEconomyPurchasesApiClientApi Purchases { get; }
    }

    public class IncrementBalanceOptions
    {
        public string WriteLock;
        public IncrementBalanceOptions() {}
    }

    public class MakeVirtualPurchaseOptions
    {
        public System.Collections.Generic.List<string> PlayersInventoryItemIds;
        public MakeVirtualPurchaseOptions() {}
    }

    [System.Obsolete(@"The interface provided by Economy.PlayerBalances has been replaced by EconomyService.Instance.PlayerBalances, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public class PlayerBalances
    {
        public PlayerBalances() {}
        [System.Obsolete(@"The interface provided by Economy.PlayerBalances.DecrementBalanceAsync(string currencyId, int amount, DecrementBalanceOptions options) has been replaced by EconomyService.Instance.PlayerBalances.DecrementBalanceAsync(string currencyId, int amount, DecrementBalanceOptions options), and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<Model.PlayerBalance> DecrementBalanceAsync(string currencyId, int amount, PlayerBalances.DecrementBalanceOptions options = default(PlayerBalances.DecrementBalanceOptions));
        [System.Obsolete(@"The interface provided by Economy.PlayerBalances.GetBalancesAsync(GetBalancesOptions options) has been replaced by EconomyService.Instance.PlayerBalances.GetBalancesAsync(GetBalancesOptions options), and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<Model.GetBalancesResult> GetBalancesAsync(PlayerBalances.GetBalancesOptions options = default(PlayerBalances.GetBalancesOptions));
        [System.Obsolete(@"The interface provided by Economy.PlayerBalances.IncrementBalanceAsync(string currencyId, int amount, IncrementBalanceOptions options) has been replaced by EconomyService.Instance.PlayerBalances.IncrementBalanceAsync(string currencyId, int amount, IncrementBalanceOptions options), and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<Model.PlayerBalance> IncrementBalanceAsync(string currencyId, int amount, PlayerBalances.IncrementBalanceOptions options = default(PlayerBalances.IncrementBalanceOptions));
        [System.Obsolete(@"The interface provided by Economy.PlayerBalances.SetBalanceAsync(string currencyId, long balance, SetBalanceOptions options) has been replaced by EconomyService.Instance.PlayerBalances.SetBalanceAsync(string currencyId, long balance, SetBalanceOptions options), and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<Model.PlayerBalance> SetBalanceAsync(string currencyId, long balance, PlayerBalances.SetBalanceOptions options = default(PlayerBalances.SetBalanceOptions));
        [System.Obsolete(@"The model provided by Economy.PlayerBalances.DecrementBalanceOptions has been moved to EconomyService.Instance.DecrementBalanceOptions, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public class DecrementBalanceOptions : DecrementBalanceOptions
        {
            public DecrementBalanceOptions() {}
        }
        [System.Obsolete(@"The model provided by Economy.PlayerBalances.GetBalancesOptions has been moved to EconomyService.Instance.GetBalancesOptions, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public class GetBalancesOptions : GetBalancesOptions
        {
            public GetBalancesOptions() {}
        }
        [System.Obsolete(@"The model provided by Economy.PlayerBalances.IncrementBalanceOptions has been moved to EconomyService.Instance.IncrementBalanceOptions, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public class IncrementBalanceOptions : IncrementBalanceOptions
        {
            public IncrementBalanceOptions() {}
        }
        [System.Obsolete(@"The model provided by Economy.PlayerBalances.SetBalanceOptions has been moved to EconomyService.Instance.SetBalanceOptions, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public class SetBalanceOptions : SetBalanceOptions
        {
            public SetBalanceOptions() {}
        }
    }

    [System.Obsolete(@"The interface provided by Economy.PlayerInventory has been replaced by EconomyService.Instance.PlayerInventory, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public class PlayerInventory
    {
        public PlayerInventory() {}
        [System.Obsolete(@"The interface provided by Economy.PlayerInventory.AddInventoryItemAsync(string inventoryItemId, AddInventoryItemOptions options) has been replaced by EconomyService.Instance.PlayerInventory.AddInventoryItemAsync(string inventoryItemId, AddInventoryItemOptions options), and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<Model.PlayersInventoryItem> AddInventoryItemAsync(string inventoryItemId, PlayerInventory.AddInventoryItemOptions options = default(PlayerInventory.AddInventoryItemOptions));
        [System.Obsolete(@"The interface provided by Economy.PlayerInventory.DeletePlayersInventoryItemAsync(string playersInventoryItemId, DeletePlayersInventoryItemOptions options) has been replaced by EconomyService.Instance.PlayerInventory.DeletePlayersInventoryItemAsync(string playersInventoryItemId, DeletePlayersInventoryItemOptions options), and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task DeletePlayersInventoryItemAsync(string playersInventoryItemId, PlayerInventory.DeletePlayersInventoryItemOptions options = default(PlayerInventory.DeletePlayersInventoryItemOptions));
        [System.Obsolete(@"The interface provided by Economy.PlayerInventory.GetInventoryAsync(GetInventoryOptions options) has been replaced by EconomyService.Instance.PlayerInventory.GetInventoryAsync(GetInventoryOptions options), and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<Model.GetInventoryResult> GetInventoryAsync(PlayerInventory.GetInventoryOptions options = default(PlayerInventory.GetInventoryOptions));
        [System.Obsolete(@"The interface provided by Economy.PlayerInventory.UpdatePlayersInventoryItemAsync(string playersInventoryItemId, Dictionary<string, object> instanceData, UpdatePlayersInventoryItemOptions options) has been replaced by EconomyService.Instance.PlayerInventory.UpdatePlayersInventoryItemAsync(string playersInventoryItemId, Dictionary<string, object> instanceData, UpdatePlayersInventoryItemOptions options), and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<Model.PlayersInventoryItem> UpdatePlayersInventoryItemAsync(string playersInventoryItemId, System.Collections.Generic.Dictionary<string, object> instanceData, PlayerInventory.UpdatePlayersInventoryItemOptions options = default(PlayerInventory.UpdatePlayersInventoryItemOptions));
        [System.Obsolete(@"The model provided by Economy.PlayerInventory.AddInventoryItemOptions has been moved to EconomyService.Instance.AddInventoryItemOptions, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public class AddInventoryItemOptions : AddInventoryItemOptions
        {
            public AddInventoryItemOptions() {}
        }
        [System.Obsolete(@"The model provided by Economy.PlayerInventory.DeletePlayersInventoryItemOptions has been moved to EconomyService.Instance.DeletePlayersInventoryItemOptions, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public class DeletePlayersInventoryItemOptions : DeletePlayersInventoryItemOptions
        {
            public DeletePlayersInventoryItemOptions() {}
        }
        [System.Obsolete(@"The model provided by Economy.PlayerInventory.GetInventoryOptions has been moved to EconomyService.Instance.GetInventoryOptions, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public class GetInventoryOptions : GetInventoryOptions
        {
            public GetInventoryOptions() {}
        }
        [System.Obsolete(@"The model provided by Economy.PlayerInventory.UpdatePlayersInventoryItemOptions has been moved to EconomyService.Instance.UpdatePlayersInventoryItemOptions, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public class UpdatePlayersInventoryItemOptions : UpdatePlayersInventoryItemOptions
        {
            public UpdatePlayersInventoryItemOptions() {}
        }
    }

    [System.Obsolete(@"The interface provided by Economy.Purchases has been replaced by EconomyService.Instance.Purchases, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public class Purchases
    {
        public Purchases() {}
        [System.Obsolete(@"The interface provided by Economy.Purchases.MakeVirtualPurchaseAsync(string virtualPurchaseId, Services.Economy.MakeVirtualPurchaseOptions options) has been replaced by EconomyService.Instance.Purchases.MakeVirtualPurchaseAsync(string virtualPurchaseId, Services.Economy.MakeVirtualPurchaseOptions options), and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<Model.MakeVirtualPurchaseResult> MakeVirtualPurchaseAsync(string virtualPurchaseId, MakeVirtualPurchaseOptions options = default(MakeVirtualPurchaseOptions));
        [System.Obsolete(@"The interface provided by Economy.Purchases.RedeemAppleAppStorePurchaseAsync(RedeemAppleAppStorePurchaseArgs args) has been replaced by EconomyService.Instance.Purchases.RedeemAppleAppStorePurchaseAsync(RedeemAppleAppStorePurchaseArgs args), and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<Model.RedeemAppleAppStorePurchaseResult> RedeemAppleAppStorePurchaseAsync(Purchases.RedeemAppleAppStorePurchaseArgs args);
        [System.Obsolete(@"The interface provided by Economy.Purchases.RedeemGooglePlayPurchaseAsync(RedeemGooglePlayStorePurchaseArgs args) has been replaced by EconomyService.Instance.Purchases.RedeemGooglePlayPurchaseAsync(RedeemGooglePlayStorePurchaseArgs args), and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<Model.RedeemGooglePlayPurchaseResult> RedeemGooglePlayPurchaseAsync(Purchases.RedeemGooglePlayStorePurchaseArgs args);
        [System.Obsolete(@"The model provided by Economy.Purchases.MakeVirtualPurchaseOptions has been moved to EconomyService.Instance.MakeVirtualPurchaseOptions, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public class MakeVirtualPurchaseOptions : MakeVirtualPurchaseOptions
        {
            public MakeVirtualPurchaseOptions() {}
        }
        [System.Obsolete(@"The model provided by Economy.Purchases.RedeemAppleAppStorePurchaseArgs has been moved to EconomyService.Instance.RedeemAppleAppStorePurchaseArgs, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public class RedeemAppleAppStorePurchaseArgs : RedeemAppleAppStorePurchaseArgs
        {
            public RedeemAppleAppStorePurchaseArgs(string realMoneyPurchaseId, string receipt, int localCost, string localCurrency) {}
        }
        [System.Obsolete(@"The model provided by Economy.Purchases.RedeemGooglePlayStorePurchaseArgs has been moved to EconomyService.Instance.RedeemGooglePlayStorePurchaseArgs, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public class RedeemGooglePlayStorePurchaseArgs : RedeemGooglePlayStorePurchaseArgs
        {
            public RedeemGooglePlayStorePurchaseArgs(string realMoneyPurchaseId, string purchaseData, string purchaseDataSignature, int localCost, string localCurrency) {}
        }
    }

    public class RedeemAppleAppStorePurchaseArgs
    {
        public int LocalCost { get; set; }
        public string LocalCurrency { get; set; }
        public string RealMoneyPurchaseId { get; set; }
        public string Receipt { get; set; }
        public RedeemAppleAppStorePurchaseArgs(string realMoneyPurchaseId, string receipt, int localCost, string localCurrency) {}
    }

    public class RedeemGooglePlayStorePurchaseArgs
    {
        public int LocalCost { get; set; }
        public string LocalCurrency { get; set; }
        public string PurchaseData { get; set; }
        public string PurchaseDataSignature { get; set; }
        public string RealMoneyPurchaseId { get; set; }
        public RedeemGooglePlayStorePurchaseArgs(string realMoneyPurchaseId, string purchaseData, string purchaseDataSignature, int localCost, string localCurrency) {}
    }

    public class SetBalanceOptions
    {
        public string WriteLock;
        public SetBalanceOptions() {}
    }

    public class UpdatePlayersInventoryItemOptions
    {
        public string WriteLock;
        public UpdatePlayersInventoryItemOptions() {}
    }
}

namespace Unity.Services.Economy.Internal.Http
{
    public class DeserializationSettings
    {
        public MissingMemberHandling MissingMemberHandling;
        public DeserializationSettings() {}
    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonObjectConverter))] [UnityEngine.Scripting.Preserve] public interface IDeserializable
    {
        public T GetAs<T>(DeserializationSettings deserializationSettings = default(DeserializationSettings));
        public string GetAsString();
    }

    public enum MissingMemberHandling
    {
        Error = 0,
        Ignore = 1,
    }
}

namespace Unity.Services.Economy.Model
{
    public class AppleStore
    {
        [UnityEngine.Scripting.Preserve] public string Code;
        [UnityEngine.Scripting.Preserve] public string Message;
        [UnityEngine.Scripting.Preserve] public string Receipt;
        [Newtonsoft.Json.JsonConstructor] [UnityEngine.Scripting.Preserve] public AppleStore(string code, string message, string receipt) {}
    }

    public class AppleVerification
    {
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] [UnityEngine.Scripting.Preserve] public AppleVerification.StatusOptions Status;
        [UnityEngine.Scripting.Preserve] public AppleStore Store;
        [UnityEngine.Scripting.Preserve] public AppleVerification(AppleVerification.StatusOptions status, AppleStore store) {}
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] public enum StatusOptions
        {
            [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ALREADY_REDEEMED")] INVALIDALREADYREDEEMED = 3,
            [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ANOTHER_PLAYER")] INVALIDANOTHERPLAYER = 5,
            [System.Runtime.Serialization.EnumMember(Value = @"INVALID_CONFIGURATION")] INVALIDCONFIGURATION = 6,
            [System.Runtime.Serialization.EnumMember(Value = @"INVALID_PRODUCT_ID_MISMATCH")] INVALIDPRODUCTIDMISMATCH = 7,
            [System.Runtime.Serialization.EnumMember(Value = @"INVALID_VERIFICATION_FAILED")] INVALIDVERIFICATIONFAILED = 4,
            [System.Runtime.Serialization.EnumMember(Value = @"VALID")] VALID = 1,
            [System.Runtime.Serialization.EnumMember(Value = @"VALID_NOT_REDEEMED")] VALIDNOTREDEEMED = 2,
        }
    }

    [UnityEngine.Scripting.Preserve] public class ConfigurationItemDefinition
    {
        [Newtonsoft.Json.JsonProperty(@"created")] [UnityEngine.Scripting.Preserve] public EconomyDate Created;
        [Newtonsoft.Json.JsonProperty(@"customData")] [System.Obsolete(@"The interface provided by CustomData has been replaced by CustomDataDeserializable, and should be accessed from there instead. This API will be removed in an upcoming release.", false)] [UnityEngine.Scripting.Preserve] public System.Collections.Generic.Dictionary<string, object> CustomData;
        public Unity.Services.Economy.Internal.Http.IDeserializable CustomDataDeserializable;
        [Newtonsoft.Json.JsonProperty(@"id")] [Newtonsoft.Json.JsonRequired] [UnityEngine.Scripting.Preserve] public string Id;
        [Newtonsoft.Json.JsonProperty(@"modified")] [UnityEngine.Scripting.Preserve] public EconomyDate Modified;
        [Newtonsoft.Json.JsonProperty(@"name")] [Newtonsoft.Json.JsonRequired] [UnityEngine.Scripting.Preserve] public string Name;
        [Newtonsoft.Json.JsonProperty(@"type")] [Newtonsoft.Json.JsonRequired] [UnityEngine.Scripting.Preserve] public string Type;
        public ConfigurationItemDefinition() {}
    }

    public class ConfigurationResource
    {
        public System.Type Type { get; }
        public object Value { get; }
    }

    [UnityEngine.Scripting.Preserve] public class Costs
    {
        [UnityEngine.Scripting.Preserve] public System.Collections.Generic.List<CurrencyExchangeItem> Currency;
        [UnityEngine.Scripting.Preserve] public System.Collections.Generic.List<InventoryExchangeItem> Inventory;
        [Newtonsoft.Json.JsonConstructor] [UnityEngine.Scripting.Preserve] public Costs(System.Collections.Generic.List<CurrencyExchangeItem> currencies, System.Collections.Generic.List<InventoryExchangeItem> inventory) {}
    }

    [UnityEngine.Scripting.Preserve] public class CurrencyDefinition : ConfigurationItemDefinition
    {
        [Newtonsoft.Json.JsonProperty(@"initial")] [Newtonsoft.Json.JsonRequired] [UnityEngine.Scripting.Preserve] public int Initial;
        [Newtonsoft.Json.JsonProperty(@"max")] [UnityEngine.Scripting.Preserve] public int Max;
        [UnityEngine.Scripting.Preserve] public CurrencyDefinition() {}
        public System.Threading.Tasks.Task<PlayerBalance> GetPlayerBalanceAsync();
    }

    [UnityEngine.Scripting.Preserve] public class CurrencyExchangeItem
    {
        [UnityEngine.Scripting.Preserve] public int Amount;
        [UnityEngine.Scripting.Preserve] public string Id;
        [Newtonsoft.Json.JsonConstructor] [UnityEngine.Scripting.Preserve] public CurrencyExchangeItem(string id, int amount) {}
    }

    [UnityEngine.Scripting.Preserve] public class EconomyDate
    {
        [Newtonsoft.Json.JsonProperty(@"date")] [UnityEngine.Scripting.Preserve] public System.DateTime Date;
        public EconomyDate() {}
    }

    [UnityEngine.Scripting.Preserve] public class EconomyReference
    {
        [Newtonsoft.Json.JsonConstructor] [UnityEngine.Scripting.Preserve] public EconomyReference(ConfigurationItemDefinition configItem) {}
        [UnityEngine.Scripting.Preserve] public ConfigurationItemDefinition GetReferencedConfigurationItem();
    }

    [UnityEngine.Scripting.Preserve] public class GetBalancesResult : Unity.Services.Economy.Model.PageableResult<PlayerBalance, GetBalancesResult>
    {
        [UnityEngine.Scripting.Preserve] public System.Collections.Generic.List<PlayerBalance> Balances { get; }
        [UnityEngine.Scripting.Preserve] protected override System.Threading.Tasks.Task<GetBalancesResult> GetNextResultsAsync(int itemsPerFetch);
    }

    [UnityEngine.Scripting.Preserve] public class GetInventoryResult : Unity.Services.Economy.Model.PageableResult<PlayersInventoryItem, GetInventoryResult>
    {
        [UnityEngine.Scripting.Preserve] public System.Collections.Generic.List<PlayersInventoryItem> PlayersInventoryItems { get; }
        [UnityEngine.Scripting.Preserve] protected override System.Threading.Tasks.Task<GetInventoryResult> GetNextResultsAsync(int itemsPerFetch);
    }

    public class GoogleStore
    {
        [UnityEngine.Scripting.Preserve] public string Receipt;
        [Newtonsoft.Json.JsonConstructor] [UnityEngine.Scripting.Preserve] public GoogleStore(string receipt) {}
    }

    public class GoogleVerification
    {
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] [UnityEngine.Scripting.Preserve] public GoogleVerification.StatusOptions Status;
        [UnityEngine.Scripting.Preserve] public GoogleStore Store;
        [UnityEngine.Scripting.Preserve] public GoogleVerification(GoogleVerification.StatusOptions status, GoogleStore store) {}
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] public enum StatusOptions
        {
            [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ALREADY_REDEEMED")] INVALIDALREADYREDEEMED = 3,
            [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ANOTHER_PLAYER")] INVALIDANOTHERPLAYER = 5,
            [System.Runtime.Serialization.EnumMember(Value = @"INVALID_CONFIGURATION")] INVALIDCONFIGURATION = 6,
            [System.Runtime.Serialization.EnumMember(Value = @"INVALID_PRODUCT_ID_MISMATCH")] INVALIDPRODUCTIDMISMATCH = 7,
            [System.Runtime.Serialization.EnumMember(Value = @"INVALID_VERIFICATION_FAILED")] INVALIDVERIFICATIONFAILED = 4,
            [System.Runtime.Serialization.EnumMember(Value = @"VALID")] VALID = 1,
            [System.Runtime.Serialization.EnumMember(Value = @"VALID_NOT_REDEEMED")] VALIDNOTREDEEMED = 2,
        }
    }

    [UnityEngine.Scripting.Preserve] public class InventoryExchangeItem
    {
        [UnityEngine.Scripting.Preserve] public int Amount;
        [UnityEngine.Scripting.Preserve] public string Id;
        [UnityEngine.Scripting.Preserve] public System.Collections.Generic.List<string> PlayersInventoryItemIds;
        [Newtonsoft.Json.JsonConstructor] [UnityEngine.Scripting.Preserve] public InventoryExchangeItem(string id, int amount, System.Collections.Generic.List<string> playersInventoryItemIds) {}
    }

    [UnityEngine.Scripting.Preserve] public class InventoryItemDefinition : ConfigurationItemDefinition
    {
        [UnityEngine.Scripting.Preserve] public InventoryItemDefinition() {}
        public System.Threading.Tasks.Task<GetInventoryResult> GetAllPlayersInventoryItemsAsync();
    }

    [UnityEngine.Scripting.Preserve] public class MakeVirtualPurchaseResult
    {
        [UnityEngine.Scripting.Preserve] public Costs Costs;
        [UnityEngine.Scripting.Preserve] public Rewards Rewards;
        [Newtonsoft.Json.JsonConstructor] [UnityEngine.Scripting.Preserve] public MakeVirtualPurchaseResult(Costs costs, Rewards rewards) {}
    }

    [UnityEngine.Scripting.Preserve] public abstract class PageableResult<T, TSelf> where TSelf : Unity.Services.Economy.Model.PageableResult<T, TSelf>
    {
        [UnityEngine.Scripting.Preserve] public bool HasNext;
        [UnityEngine.Scripting.Preserve] protected System.Collections.Generic.List<T> m_Results;
        [UnityEngine.Scripting.Preserve] protected PageableResult(System.Collections.Generic.List<T> results, bool hasNext) {}
        [UnityEngine.Scripting.Preserve] public System.Threading.Tasks.Task<TSelf> GetNextAsync(int itemsPerFetch = 20);
        [UnityEngine.Scripting.Preserve] protected abstract System.Threading.Tasks.Task<TSelf> GetNextResultsAsync(int itemsPerFetch);
    }

    [UnityEngine.Scripting.Preserve] public class PlayerBalance
    {
        [UnityEngine.Scripting.Preserve] public long Balance;
        [UnityEngine.Scripting.Preserve] public EconomyDate Created;
        [UnityEngine.Scripting.Preserve] public string CurrencyId;
        [UnityEngine.Scripting.Preserve] public EconomyDate Modified;
        [UnityEngine.Scripting.Preserve] public string WriteLock;
        [UnityEngine.Scripting.Preserve] public PlayerBalance(string currencyId = default(string), long balance = 0, string writeLock = default(string), EconomyDate created = default(EconomyDate), EconomyDate modified = default(EconomyDate)) {}
        public CurrencyDefinition GetCurrencyDefinition();
        [System.Obsolete(@"This has been replaced with GetCurrencyDefinition which is not asynchronous and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<CurrencyDefinition> GetCurrencyDefinitionAsync();
    }

    [UnityEngine.Scripting.Preserve] public class PlayersInventoryItem
    {
        [UnityEngine.Scripting.Preserve] public EconomyDate Created;
        [UnityEngine.Scripting.Preserve] public Unity.Services.Economy.Internal.Http.IDeserializable InstanceData;
        [UnityEngine.Scripting.Preserve] public string InventoryItemId;
        [UnityEngine.Scripting.Preserve] public EconomyDate Modified;
        [UnityEngine.Scripting.Preserve] public string PlayersInventoryItemId;
        [UnityEngine.Scripting.Preserve] public string WriteLock;
        [UnityEngine.Scripting.Preserve] public PlayersInventoryItem(string playersInventoryItemId = default(string), string inventoryItemId = default(string), Unity.Services.Economy.Internal.Http.IDeserializable instanceData = default(Unity.Services.Economy.Internal.Http.IDeserializable), string writeLock = default(string), EconomyDate created = default(EconomyDate), EconomyDate modified = default(EconomyDate)) {}
        public InventoryItemDefinition GetItemDefinition();
        [System.Obsolete(@"This has been replaced with GetItemDefinition which is not asynchronous and should be accessed from there instead. This API will be removed in an upcoming release.", false)] public System.Threading.Tasks.Task<InventoryItemDefinition> GetItemDefinitionAsync();
    }

    [UnityEngine.Scripting.Preserve] public class PurchaseItemQuantity
    {
        [Newtonsoft.Json.JsonProperty(@"amount")] [Newtonsoft.Json.JsonRequired] [UnityEngine.Scripting.Preserve] public int Amount;
        [Newtonsoft.Json.JsonProperty(@"itemId")] [Newtonsoft.Json.JsonRequired] [UnityEngine.Scripting.Preserve] public EconomyReference Item;
        [UnityEngine.Scripting.Preserve] public PurchaseItemQuantity() {}
    }

    [UnityEngine.Scripting.Preserve] public class RealMoneyPurchaseDefinition : ConfigurationItemDefinition
    {
        [Newtonsoft.Json.JsonProperty(@"rewards")] [Newtonsoft.Json.JsonRequired] [UnityEngine.Scripting.Preserve] public System.Collections.Generic.List<PurchaseItemQuantity> Rewards;
        [Newtonsoft.Json.JsonProperty(@"storeIdentifiers")] [Newtonsoft.Json.JsonRequired] [UnityEngine.Scripting.Preserve] public StoreIdentifiers StoreIdentifiers;
        [UnityEngine.Scripting.Preserve] public RealMoneyPurchaseDefinition() {}
    }

    public class RedeemAppleAppStorePurchaseResult
    {
        [UnityEngine.Scripting.Preserve] public Rewards Rewards;
        [UnityEngine.Scripting.Preserve] public AppleVerification Verification;
        [Newtonsoft.Json.JsonConstructor] [UnityEngine.Scripting.Preserve] public RedeemAppleAppStorePurchaseResult(AppleVerification verification, Rewards rewards) {}
    }

    public class RedeemGooglePlayPurchaseResult
    {
        [UnityEngine.Scripting.Preserve] public Rewards Rewards;
        [UnityEngine.Scripting.Preserve] public GoogleVerification Verification;
        [Newtonsoft.Json.JsonConstructor] [UnityEngine.Scripting.Preserve] public RedeemGooglePlayPurchaseResult(GoogleVerification verification, Rewards rewards) {}
    }

    [UnityEngine.Scripting.Preserve] public class Rewards
    {
        [UnityEngine.Scripting.Preserve] public System.Collections.Generic.List<CurrencyExchangeItem> Currency;
        [UnityEngine.Scripting.Preserve] public System.Collections.Generic.List<InventoryExchangeItem> Inventory;
        [Newtonsoft.Json.JsonConstructor] [UnityEngine.Scripting.Preserve] public Rewards(System.Collections.Generic.List<CurrencyExchangeItem> currencies, System.Collections.Generic.List<InventoryExchangeItem> inventory) {}
    }

    [UnityEngine.Scripting.Preserve] public class StoreIdentifiers
    {
        [Newtonsoft.Json.JsonProperty(@"appleAppStore")] [UnityEngine.Scripting.Preserve] public string AppleAppStore;
        [Newtonsoft.Json.JsonProperty(@"googlePlayStore")] [UnityEngine.Scripting.Preserve] public string GooglePlayStore;
        [UnityEngine.Scripting.Preserve] public StoreIdentifiers() {}
    }

    [UnityEngine.Scripting.Preserve] public class VirtualPurchaseDefinition : ConfigurationItemDefinition
    {
        [Newtonsoft.Json.JsonProperty(@"costs")] [Newtonsoft.Json.JsonRequired] [UnityEngine.Scripting.Preserve] public System.Collections.Generic.List<PurchaseItemQuantity> Costs;
        [Newtonsoft.Json.JsonProperty(@"rewards")] [Newtonsoft.Json.JsonRequired] [UnityEngine.Scripting.Preserve] public System.Collections.Generic.List<PurchaseItemQuantity> Rewards;
        [UnityEngine.Scripting.Preserve] public VirtualPurchaseDefinition() {}
        public System.Threading.Tasks.Task<bool> CanPlayerAffordPurchaseAsync();
        public System.Threading.Tasks.Task<MakeVirtualPurchaseResult> MakePurchaseAsync(System.Collections.Generic.List<PlayersInventoryItem> playersInventoryItems);
        public System.Threading.Tasks.Task<MakeVirtualPurchaseResult> MakePurchaseAsync(MakeVirtualPurchaseOptions options = default(MakeVirtualPurchaseOptions));
    }
}

namespace Unity.Services.Economy.Tools
{
    [UnityEngine.CreateAssetMenu(fileName = @"PlayerBalancesHelper", menuName = @"Economy Tools/Player Balances Helper")] public class PlayerBalancesHelper : UnityEngine.ScriptableObject
    {
        [UnityEngine.Header(@"Currencies Helper")] public PlayerBalancesHelper.CurrencyAction action;
        public int amount;
        public string currencyId;
        public PlayerBalancesHelper() {}
        public void InvokeAsync();
        public enum CurrencyAction
        {
            Decrement = 2,
            Increment = 1,
            Set = 0,
        }
    }

    [UnityEngine.CreateAssetMenu(fileName = @"PlayerInventoriesHelper", menuName = @"Economy Tools/Player Inventories Helper")] public class PlayerInventoriesHelper : UnityEngine.ScriptableObject
    {
        [UnityEngine.Header(@"Inventories Helper")] public PlayerInventoriesHelper.InventoriesAction action;
        [UnityEngine.Header(@"Update Instance Settings")] [UnityEngine.TextArea] public string instanceDataJson;
        [UnityEngine.Header(@"Add Instance Settings")] public string inventoryItemId;
        public string playersInventoryItemId;
        public PlayerInventoriesHelper() {}
        public void InvokeAsync();
        public enum InventoriesAction
        {
            Add = 0,
            Delete = 2,
            Update = 1,
        }
    }

    [UnityEngine.CreateAssetMenu(fileName = @"PurchasesHelper", menuName = @"Economy Tools/Purchases Helper")] public class PurchasesHelper : UnityEngine.ScriptableObject
    {
        [UnityEngine.Header(@"Make Purchase")] public string purchaseId;
        public PurchasesHelper() {}
        public void InvokeAsync();
    }
}
