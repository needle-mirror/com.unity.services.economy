//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System.Threading.Tasks;
using System.Collections.Generic;
using Unity.Services.Economy.Editor.Authoring.AdminApi.Client.Models;
using Unity.Services.Economy.Editor.Authoring.AdminApi.Client.Http;
using Unity.Services.Authentication.Internal;
using Unity.Services.Economy.Client.EconomyAdmin;
using Unity.Services.Economy.Editor.Authoring.AdminApi.Client.Configuration;

namespace Unity.Services.Economy.Client.Apis.EconomyAdmin
{
    /// <summary>
    /// Interface for the EconomyAdminApiClient
    /// </summary>
    internal interface IEconomyAdminApiClient
    {
            /// <summary>
            /// Async Operation.
            /// Add Config Resource.
            /// </summary>
            /// <param name="request">Request object for AddConfigResource.</param>
            /// <param name="operationConfiguration">Configuration for AddConfigResource.</param>
            /// <returns>Task for a Response object containing status code, headers, and AddConfigResource201Response object.</returns>
            /// <exception cref="Unity.Services.Economy.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<AddConfigResource201Response>> AddConfigResourceAsync(Unity.Services.Economy.Client.EconomyAdmin.AddConfigResourceRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Delete Config Resource.
            /// </summary>
            /// <param name="request">Request object for DeleteConfigResource.</param>
            /// <param name="operationConfiguration">Configuration for DeleteConfigResource.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Economy.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> DeleteConfigResourceAsync(Unity.Services.Economy.Client.EconomyAdmin.DeleteConfigResourceRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Edit Config Resource.
            /// </summary>
            /// <param name="request">Request object for EditConfigResource.</param>
            /// <param name="operationConfiguration">Configuration for EditConfigResource.</param>
            /// <returns>Task for a Response object containing status code, headers, and AddConfigResource201Response object.</returns>
            /// <exception cref="Unity.Services.Economy.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<AddConfigResource201Response>> EditConfigResourceAsync(Unity.Services.Economy.Client.EconomyAdmin.EditConfigResourceRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Published Resources.
            /// </summary>
            /// <param name="request">Request object for GetPublishedResources.</param>
            /// <param name="operationConfiguration">Configuration for GetPublishedResources.</param>
            /// <returns>Task for a Response object containing status code, headers, and GetPublishedResourcesResponse object.</returns>
            /// <exception cref="Unity.Services.Economy.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<GetPublishedResourcesResponse>> GetPublishedResourcesAsync(Unity.Services.Economy.Client.EconomyAdmin.GetPublishedResourcesRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Resources.
            /// </summary>
            /// <param name="request">Request object for GetResources.</param>
            /// <param name="operationConfiguration">Configuration for GetResources.</param>
            /// <returns>Task for a Response object containing status code, headers, and GetResourcesResponse object.</returns>
            /// <exception cref="Unity.Services.Economy.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<GetResourcesResponse>> GetResourcesAsync(Unity.Services.Economy.Client.EconomyAdmin.GetResourcesRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Publish Economy.
            /// </summary>
            /// <param name="request">Request object for PublishEconomy.</param>
            /// <param name="operationConfiguration">Configuration for PublishEconomy.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Economy.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> PublishEconomyAsync(Unity.Services.Economy.Client.EconomyAdmin.PublishEconomyRequest request, Configuration operationConfiguration = null);

    }

    ///<inheritdoc cref="IEconomyAdminApiClient"/>
    internal class EconomyAdminApiClient : BaseApiClient, IEconomyAdminApiClient
    {
        private IAccessToken _accessToken;
        private const int _baseTimeout = 10;
        private Configuration _configuration;
        /// <summary>
        /// Accessor for the client configuration object. This returns a merge
        /// between the current configuration and the global configuration to
        /// ensure the correct combination of headers and a base path (if it is
        /// set) are returned.
        /// </summary>
        public Configuration Configuration
        {
            get {
                // We return a merge between the current configuration and the
                // global configuration to ensure we have the correct
                // combination of headers and a base path (if it is set).
                Configuration globalConfiguration = new Configuration("https://services.unity.com/api", 10, 4, null);
                return Configuration.MergeConfigurations(_configuration, globalConfiguration);
            }
            set { _configuration = value; }
        }

        /// <summary>
        /// EconomyAdminApiClient Constructor.
        /// </summary>
        /// <param name="httpClient">The HttpClient for EconomyAdminApiClient.</param>
        /// <param name="accessToken">The Authentication token for the client.</param>
        /// <param name="configuration"> EconomyAdminApiClient Configuration object.</param>
        public EconomyAdminApiClient(IHttpClient httpClient,
            IAccessToken accessToken,
            Configuration configuration = null) : base(httpClient)
        {
            // We don't need to worry about the configuration being null at
            // this stage, we will check this in the accessor.
            _configuration = configuration;

            _accessToken = accessToken;
        }


        /// <summary>
        /// Async Operation.
        /// Add Config Resource.
        /// </summary>
        /// <param name="request">Request object for AddConfigResource.</param>
        /// <param name="operationConfiguration">Configuration for AddConfigResource.</param>
        /// <returns>Task for a Response object containing status code, headers, and AddConfigResource201Response object.</returns>
        /// <exception cref="Unity.Services.Economy.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<AddConfigResource201Response>> AddConfigResourceAsync(Unity.Services.Economy.Client.EconomyAdmin.AddConfigResourceRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"201", typeof(AddConfigResource201Response)   },{"400", typeof(ValidationErrorResponse)   },{"403", typeof(BasicErrorResponse)   },{"409", typeof(ConflictItemErrorResponse)   },{"422", typeof(BasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<AddConfigResource201Response>(response, statusCodeToTypeMap);
            return new Response<AddConfigResource201Response>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Delete Config Resource.
        /// </summary>
        /// <param name="request">Request object for DeleteConfigResource.</param>
        /// <param name="operationConfiguration">Configuration for DeleteConfigResource.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Economy.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> DeleteConfigResourceAsync(Unity.Services.Economy.Client.EconomyAdmin.DeleteConfigResourceRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200",  null },{"403", typeof(BasicErrorResponse)   },{"404", typeof(BasicErrorResponse)   },{"409", typeof(ConflictDeleteItemInUseErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Edit Config Resource.
        /// </summary>
        /// <param name="request">Request object for EditConfigResource.</param>
        /// <param name="operationConfiguration">Configuration for EditConfigResource.</param>
        /// <returns>Task for a Response object containing status code, headers, and AddConfigResource201Response object.</returns>
        /// <exception cref="Unity.Services.Economy.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<AddConfigResource201Response>> EditConfigResourceAsync(Unity.Services.Economy.Client.EconomyAdmin.EditConfigResourceRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(AddConfigResource201Response)   },{"400", typeof(ValidationErrorResponse)   },{"403", typeof(BasicErrorResponse)   },{"404", typeof(BasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PUT",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<AddConfigResource201Response>(response, statusCodeToTypeMap);
            return new Response<AddConfigResource201Response>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Published Resources.
        /// </summary>
        /// <param name="request">Request object for GetPublishedResources.</param>
        /// <param name="operationConfiguration">Configuration for GetPublishedResources.</param>
        /// <returns>Task for a Response object containing status code, headers, and GetPublishedResourcesResponse object.</returns>
        /// <exception cref="Unity.Services.Economy.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<GetPublishedResourcesResponse>> GetPublishedResourcesAsync(Unity.Services.Economy.Client.EconomyAdmin.GetPublishedResourcesRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(GetPublishedResourcesResponse)   },{"403", typeof(BasicErrorResponse)   },{"404", typeof(BasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<GetPublishedResourcesResponse>(response, statusCodeToTypeMap);
            return new Response<GetPublishedResourcesResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Resources.
        /// </summary>
        /// <param name="request">Request object for GetResources.</param>
        /// <param name="operationConfiguration">Configuration for GetResources.</param>
        /// <returns>Task for a Response object containing status code, headers, and GetResourcesResponse object.</returns>
        /// <exception cref="Unity.Services.Economy.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<GetResourcesResponse>> GetResourcesAsync(Unity.Services.Economy.Client.EconomyAdmin.GetResourcesRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(GetResourcesResponse)   },{"400", typeof(ValidationErrorResponse)   },{"403", typeof(BasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<GetResourcesResponse>(response, statusCodeToTypeMap);
            return new Response<GetResourcesResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Publish Economy.
        /// </summary>
        /// <param name="request">Request object for PublishEconomy.</param>
        /// <param name="operationConfiguration">Configuration for PublishEconomy.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Economy.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> PublishEconomyAsync(Unity.Services.Economy.Client.EconomyAdmin.PublishEconomyRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200",  null },{"403", typeof(BasicErrorResponse)   },{"422", typeof(BasicErrorResponse)   },{"503", typeof(BasicErrorResponse)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PUT",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(_accessToken, finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }

    }
}
