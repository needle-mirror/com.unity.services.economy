//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Economy.Editor.Authoring.AdminApi.Client.Http;


namespace Unity.Services.Economy.Editor.Authoring.AdminApi.Client.Models
{
    /// <summary>
    /// PublishBody model
    /// </summary>
    [Preserve]
    [DataContract(Name = "publish-body")]
    internal class PublishBody
    {
        /// <summary>
        /// Creates an instance of PublishBody.
        /// </summary>
        /// <param name="isPublished">Flag indicating intent of publishing current Economy configuration.</param>
        [Preserve]
        public PublishBody(bool isPublished = default)
        {
            IsPublished = isPublished;
        }

        /// <summary>
        /// Flag indicating intent of publishing current Economy configuration.
        /// </summary>
        [Preserve]
        [DataMember(Name = "isPublished", EmitDefaultValue = true)]
        public bool IsPublished{ get; }

        /// <summary>
        /// Formats a PublishBody into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            serializedModel += "isPublished," + IsPublished.ToString();
            return serializedModel;
        }

        /// <summary>
        /// Returns a PublishBody as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            var isPublishedStringValue = IsPublished.ToString();
            dictionary.Add("isPublished", isPublishedStringValue);

            return dictionary;
        }
    }
}
