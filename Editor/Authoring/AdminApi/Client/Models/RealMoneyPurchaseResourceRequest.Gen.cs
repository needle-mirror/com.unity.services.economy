//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Economy.Editor.Authoring.AdminApi.Client.Http;


namespace Unity.Services.Economy.Editor.Authoring.AdminApi.Client.Models
{
    /// <summary>
    ///
    /// </summary>
    [Preserve]
    [DataContract(Name = "real-money-purchase-resource-request")]
    internal class RealMoneyPurchaseResourceRequest
    {
        /// <summary>
        ///
        /// </summary>
        /// <param name="id">ID of the resource.</param>
        /// <param name="name">A descriptive name for the resource.</param>
        /// <param name="type">type param</param>
        /// <param name="storeIdentifiers">storeIdentifiers param</param>
        /// <param name="rewards">The rewards credited to the player when making the purchase. A reward is an ID of a currency or inventory item, an amount and default instance data for inventory items. An item can be used in more than one reward line.</param>
        /// <param name="customData">Max size when serialised 5 kilobits.</param>
        [Preserve]
        public RealMoneyPurchaseResourceRequest(string id, string name, TypeOptions type, RealMoneyPurchaseItemRequestStoreIdentifiers storeIdentifiers, List<RealMoneyPurchaseResourceRequestRewardsInner> rewards = default, object customData = default)
        {
            Id = id;
            Name = name;
            Type = type;
            StoreIdentifiers = storeIdentifiers;
            Rewards = rewards;
            CustomData = (IDeserializable)(customData is null ? new JsonObject(new object()) : JsonObject.GetNewJsonObjectResponse(customData));
        }

        /// <summary>
        /// ID of the resource.
        /// </summary>
        [Preserve]
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id{ get; }

        /// <summary>
        /// A descriptive name for the resource.
        /// </summary>
        [Preserve]
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name{ get; }

        /// <summary>
        /// Parameter type of RealMoneyPurchaseResourceRequest
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeOptions Type{ get; }

        /// <summary>
        /// Parameter storeIdentifiers of RealMoneyPurchaseResourceRequest
        /// </summary>
        [Preserve]
        [DataMember(Name = "storeIdentifiers", IsRequired = true, EmitDefaultValue = true)]
        public RealMoneyPurchaseItemRequestStoreIdentifiers StoreIdentifiers{ get; }

        /// <summary>
        /// The rewards credited to the player when making the purchase. A reward is an ID of a currency or inventory item, an amount and default instance data for inventory items. An item can be used in more than one reward line.
        /// </summary>
        [Preserve]
        [DataMember(Name = "rewards", EmitDefaultValue = true)]
        public List<RealMoneyPurchaseResourceRequestRewardsInner> Rewards{ get; }

        /// <summary>
        /// Max size when serialised 5 kilobits.
        /// </summary>
        [Preserve][JsonConverter(typeof(JsonObjectConverter))]
        [DataMember(Name = "customData", EmitDefaultValue = true)]
        public IDeserializable CustomData{ get; }

        /// <summary>
        /// Defines Type
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeOptions
        {
            /// <summary>
            /// Enum MONEYPURCHASE for value: MONEY_PURCHASE
            /// </summary>
            [EnumMember(Value = "MONEY_PURCHASE")]
            MONEYPURCHASE = 1
        }

        /// <summary>
        /// Formats a RealMoneyPurchaseResourceRequest into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Id != null)
            {
                serializedModel += "id," + Id + ",";
            }
            if (Name != null)
            {
                serializedModel += "name," + Name + ",";
            }
            serializedModel += "type," + Type + ",";
            if (StoreIdentifiers != null)
            {
                serializedModel += "storeIdentifiers," + StoreIdentifiers.ToString() + ",";
            }
            if (Rewards != null)
            {
                serializedModel += "rewards," + Rewards.ToString() + ",";
            }
            if (CustomData != null)
            {
                serializedModel += "customData," + CustomData.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a RealMoneyPurchaseResourceRequest as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Id != null)
            {
                var idStringValue = Id.ToString();
                dictionary.Add("id", idStringValue);
            }

            if (Name != null)
            {
                var nameStringValue = Name.ToString();
                dictionary.Add("name", nameStringValue);
            }

            var typeStringValue = Type.ToString();
            dictionary.Add("type", typeStringValue);

            return dictionary;
        }
    }
}
